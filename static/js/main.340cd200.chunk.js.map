{"version":3,"sources":["serviceWorker.js","quotesgenerator.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Quote","props","fetchNewQuote","a","setState","isLoaded","fetch","result","json","console","log","quote","quoteText","quoteauthor","quoteAuthor","randomColor","color","Math","floor","random","toString","state","this","style","background","height","width","id","className","href","border","onClick","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+LAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mECsGSC,E,kDAtHb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAwFRC,cAzFmB,sBAyFH,8BAAAC,EAAA,6DACd,EAAKC,SAAS,CACZC,UAAU,IAFE,kBAKOC,MACjB,2EANU,cAKRC,EALQ,gBAQKA,EAAOC,OARZ,OAQRA,EARQ,OASZC,QAAQC,IAAIF,GACZ,EAAKJ,SAAS,CACZO,MAAOH,EAAKI,UACZP,UAAU,EACVQ,YAAaL,EAAKM,cAGpB,EAAKC,cAhBO,kDAkBZN,QAAQC,IAAR,MAlBY,0DAzFG,EA+GnBK,YAAc,WACZ,EAAKX,SAAS,CACZY,MAAO,IAAMC,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBC,SAAS,OA/G7D,EAAKC,MAAQ,CACXV,MAAO,GACPN,UAAU,EACVQ,YAAa,GACbG,MAAO,WANQ,E,gEAYjBM,KAAKpB,kB,+BAIL,OAAOoB,KAAKD,MAAMhB,SAChB,yBACEkB,MAAO,CACLC,WAAW,GAAD,OAAKF,KAAKD,MAAML,OAC1BS,OAAQ,QACRC,MAAO,SAGT,yBAAKC,GAAG,YAAYC,UAAU,aAC5B,yBAAKA,UAAU,OACb,yBAAKA,UAAU,iDACb,yBAAKA,UAAU,QACb,yBACEA,UAAU,uCACVL,MAAO,CACLP,MAAM,GAAD,OAAKM,KAAKD,MAAML,SAGvB,wBAAIW,GAAG,QAAQL,KAAKD,MAAMV,OAC1B,gCACEgB,GAAG,SACHC,UAAU,8BAFZ,KAIKN,KAAKD,MAAMR,cAGlB,yBAAKe,UAAU,eACb,uBAAGD,GAAG,cAAcE,KAAK,4BACvB,uBACED,UAAU,mCACVL,MAAO,CACLP,MAAM,GAAD,OAAKM,KAAKD,MAAML,WAI3B,uBAAGa,KAAK,KACN,uBACED,UAAU,oCACVL,MAAO,CACLP,MAAM,GAAD,OAAKM,KAAKD,MAAML,WAI3B,uBAAGa,KAAK,KACN,uBACED,UAAU,gCACVL,MAAO,CACLP,MAAM,GAAD,OAAKM,KAAKD,MAAML,WAI3B,4BACEW,GAAG,YACHC,UAAU,+BACVL,MAAO,CACLO,OAAO,GAAD,OAAKR,KAAKD,MAAML,OACtBQ,WAAW,GAAD,OAAKF,KAAKD,MAAML,QAE5Be,QAAST,KAAKpB,eAPhB,oBAkBZ,O,GAtFc8B,aCQpBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SFsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,a","file":"static/js/main.340cd200.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from \"react\";\nclass Quote extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quote: \"\",\n      isLoaded: false,\n      quoteauthor: \"\",\n      color: \"#000000\"\n    };\n  }\n\n  componentDidMount() {\n    //https://api.forismatic.com/api/1.0/?method=getQuote&lang=en&format=jsonp&jsonp=?\n    this.fetchNewQuote();\n  }\n\n  render() {\n    return this.state.isLoaded ? (\n      <div\n        style={{\n          background: `${this.state.color}`,\n          height: \"100vh\",\n          width: \"100%\"\n        }}\n      >\n        <div id=\"quote-box\" className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-md-9 col-sm-12 col-lg-6 my-5 mx-auto py-5\">\n              <div className=\"card\">\n                <div\n                  className=\"card-body align-self-center bg-light\"\n                  style={{\n                    color: `${this.state.color}`\n                  }}\n                >\n                  <h1 id=\"text\">{this.state.quote}</h1>\n                  <blockquote\n                    id=\"author\"\n                    className=\"card-block card-blockquote\"\n                  >\n                    - {this.state.quoteauthor}\n                  </blockquote>\n                </div>\n                <div className=\"card-footer\">\n                  <a id=\"tweet-quote\" href=\"twitter.com/intent/tweet\">\n                    <i\n                      className=\"fab fa-twitter-square mr-3 fa-2x\"\n                      style={{\n                        color: `${this.state.color}`\n                      }}\n                    ></i>\n                  </a>\n                  <a href=\"#\">\n                    <i\n                      className=\"fab fa-facebook-square mr-3 fa-2x\"\n                      style={{\n                        color: `${this.state.color}`\n                      }}\n                    ></i>\n                  </a>\n                  <a href=\"#\">\n                    <i\n                      className=\"fab fa-instagram-square fa-2x\"\n                      style={{\n                        color: `${this.state.color}`\n                      }}\n                    ></i>\n                  </a>\n                  <button\n                    id=\"new-quote\"\n                    className=\"btn btn-primary float-right \"\n                    style={{\n                      border: `${this.state.color}`,\n                      background: `${this.state.color}`\n                    }}\n                    onClick={this.fetchNewQuote}\n                  >\n                    Next Quote\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    ) : (\n      \"\"\n    );\n  }\n\n  fetchNewQuote = async () => {\n    this.setState({\n      isLoaded: false\n    });\n    try {\n      let result = await fetch(\n        \"https://api.forismatic.com/api/1.0/?method=getQuote&lang=en&format=json\"\n      );\n      let json = await result.json();\n      console.log(json);\n      this.setState({\n        quote: json.quoteText,\n        isLoaded: true,\n        quoteauthor: json.quoteAuthor\n      });\n\n      this.randomColor();\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  randomColor = () => {\n    this.setState({\n      color: \"#\" + Math.floor(Math.random() * 16777215).toString(16)\n    });\n  };\n}\n\nexport default Quote;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"font-awesome/css/font-awesome.min.css\";\n\nimport Quote from \"./quotesgenerator\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Quote />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}